// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuizYear {
  YEAR_1
  YEAR_2
  YEAR_3
  YEAR_4
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attempts UserQuizAttempt[]
}

model Quiz {
  id          String            @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  year        QuizYear         

  questions Question[]
  attempts  UserQuizAttempt[]
}

model Question {
  id        String   @id @default(uuid())
  text      String
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz        Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     Option[]
  userAnswers UserAnswer[]
}

model Option {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean  @default(false)
  questionId String

  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[] // Relation to UserAnswer if you want to track which options were selected
}

model UserQuizAttempt {
  id             String    @id @default(uuid())
  userId         String
  quizId         String
  score          Int
  startedAt      DateTime  @default(now())
  completedAt    DateTime? @updatedAt // Or make nullable and set explicitly

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers UserAnswer[]
}

model UserAnswer {
  id                String          @id @default(uuid())
  userQuizAttemptId String
  questionId        String
  selectedOptionId  String
  isCorrect         Boolean  

  attempt        UserQuizAttempt @relation(fields: [userQuizAttemptId], references: [id], onDelete: Cascade)
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption Option          @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

  @@unique([userQuizAttemptId, questionId]) // A user can answer a question only once per attempt
}